#Autotest.add_hook :initialize do |at|
#  at.clear_mappings
#	
#  at.add_mapping(/.*Controller\.groovy$/){ |f, _| f.sub(/Controller\.groovy/, '').sub(/.*\//, '') }
	
#  at.add_mapping(%r%^test/integration/.*Tests\.groovy$%) {|filename, _| filename }
#end

Autotest.add_hook :died do |at|
	puts "DIED: #{$!.inspect}"
	p $!.backtrace
end


# Override autotest default magic deciding which test to run when
# a file is changed : enable more flexible naming conventions
# trading some of the efficiency: we rerun all the tests each time.
#
class Autotest

	def test_files_for(filename)
		if filename =~ /.*Controller.groovy$/ 
			puts "in if"
			f = filename.sub(/\.groovy/, '').sub(/.*\//, '')
			puts "f #{f}"

			puts "dir: #{Dir["test/**/#{f}Tests.groovy"]}"
			return Dir["test/**/#{f}Tests.groovy"]
		end
	
    return Dir["test/**/*.groovy"]
  end 

	def make_test_cmd files_to_test
		puts "making command for:"
		p files_to_test
		cmds = []
		full, partial = reorder(files_to_test).partition { |k,v| v.empty? }

    classes = full.map {|k,v| k}.flatten.uniq if partial.empty?
		classes = partial.map {|k,v| k}.flatten.uniq unless partial.empty?

		tests = []
		puts "classes: #{classes.join(' ')}"
    classes.each { |f|
				next unless f =~ /.*Tests\.groovy$/
				tests << f.sub(/Tests\.groovy/, '').sub(/.*\//, '').sub(/.*\./,'')
    }
		tests.uniq!
		puts "tests: #{tests}"
		cmds << "grails test-app #{tests.join(' ')}"

		return cmds.join("#{SEP} ")
  end

	def handle_results(results)
		
		begin
			units =  results.scan(/Starting unit tests(.*)Starting integration tests/m)[0][0].scan(/Running \d* \w+ test\w?\.\.\.\s(.*)\sTests Completed/m)[0]
			integrations = results.scan(/Starting integration tests(.*)/m)[0][0].scan(/Running \d* \w+ test\w?\.\.\.\s(.*)\sTests Completed/m)[0]
			texts = []
			texts += units if units
			texts += integrations if integrations
			p texts
			self.files_to_test = handle_grails_result_output( texts )
		rescue
			p $!
			self.files_to_test = new_hash_of_arrays
		end
		p self.files_to_test
	end

	def handle_grails_result_output(results)
		filters = new_hash_of_arrays
		current_test = ""
		results.each { |result_texts|
			result_texts.each_line { |line|
				if(line =~ /^\s+/) then  #line starts with whitespace contais a result
					unless line =~ /.*SUCCESS$/ then
						filters["test/integration/#{current_test}.groovy"] = line.strip().sub(/\..*/,"")
					end	
				else
					current_test = line.scan(/Running test (.+)\.\.\./)[0][0]
				end
			}
		}
		filters
	end


  def find_files
    result = {}
    targets = self.find_directories + self.extra_files
    self.find_order.clear

    targets.each do |target|
      order = []
      Find.find(target) do |f|
        Find.prune if f =~ self.exceptions

        next if test ?d, f
        next if f =~ /(swp|~|rej|orig)$/ # temporary/patch files
        next if f =~ /\/\.?#/            # Emacs autosave/cvs merge files
				next unless f =~ /.*\.groovy$/
        filename = f.sub(/^\.\//, '')

        result[filename] = File.stat(filename).mtime rescue next
        order << filename
      end
      self.find_order.push(*order.sort)
    end

    return result
  end





#  def find_files_to_test(files=find_files)
#    updated = files.select { |filename, mtime| self.last_mtime < mtime }
#
#    p updated if $v unless updated.empty? || self.last_mtime.to_i == 0
#
#    hook :updated, updated unless updated.empty? || self.last_mtime.to_i == 0
#    updated.map { |f,m| test_files_for(f) }.flatten.uniq.each do |filename|
#			puts "adding to tests: #{filename}"
#      self.files_to_test[filename] # creates key with default value
#    end
#
#    if updated.empty? then
#      nil
#    else
#      files.values.max
#    end
#  end



#	def all_good
#		puts "files_to_test.empty?: #{files_to_test.empty?}"
#		puts "files_to_test: #{files_to_test}"
#    files_to_test.empty?
#  end

#	def get_to_green
#		puts "STARTING GET_TO_GREEN!!!!"
#    begin
#      run_tests
#      wait_for_changes unless all_good
#    end until all_good
#  end

end
